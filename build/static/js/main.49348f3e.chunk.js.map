{"version":3,"sources":["Components/Filter/Filter.module.css","App.module.css","redux/actions-types.js","redux/reducer.js","redux/store.js","redux/actions.js","Components/ContactList/ContactList.jsx","Components/Filter/Filter.jsx","Components/ContactForm/ContactForm.jsx","App.js","index.js","Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactList.module.css"],"names":["module","exports","ADD_CONTACT","FILTER_CONTACT","DELETE_CONTACT","items","createReducer","state","action","payload","filter","contact","id","_","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","devtools","process","addContact","createAction","text","shortid","generate","completed","filterContact","deleteContact","getVisisbleContacts","allContacts","normoliseFilter","toLowerCase","console","log","name","includes","connect","contacts","dispatch","onDeleteContacts","className","s","map","number","item","tel","btnDel","onClick","value","onChange","event","currentTarget","label","type","pattern","title","required","input","onSubmit","useState","setName","setNumber","handleChange","form","preventDefault","btnAdd","App","setContacts","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","app","submit","some","alert","titleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,KAAO,qBAAqB,MAAQ,wB,mBCApHD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,mBAAmB,cAAgB,6B,wJCDvEC,EAAc,cACdC,EAAiB,cACjBC,EAAiB,iBCKxBC,EAAQC,YAAc,IAAD,mBACxBJ,GAAc,SAACK,EAAOC,GAAR,4BAAuBD,GAAvB,CAA8BC,EAAOC,aAD3B,cAExBL,GAAiB,SAACG,EAAOC,GAAR,OAAmBD,EAAMG,QAAO,SAACC,GAAD,OAAaA,EAAQC,KAAOJ,EAAOC,cAF5D,IAKrBC,EAASJ,YAAc,GAAD,eACzBH,GAAiB,SAACU,EAAGL,GAAJ,OAAeA,EAAOC,YAI3BK,cAAgB,CAAET,QAAOK,WCVlCK,EAAU,sBAAOC,eAAP,CAA+BC,MAElCC,EAAQC,YAAe,CAClCC,UACAL,aACAM,UAAUC,I,wCCPCC,EAAaC,YAAatB,GAAa,SAAAuB,GAClD,MAAO,CACLhB,QAAQ,yBACNG,GAAIc,IAAQC,YACTF,GAFE,IAGLG,WAAW,QAKJC,EAAgBL,YAAarB,GAE7B2B,EAAgBN,YAAapB,G,uBCIpC2B,EAAsB,SAACC,EAAatB,GACxC,IAAMuB,EAAkBvB,EAAOwB,cAI/B,OAFAC,QAAQC,IAAIJ,GAELA,EAAYtB,QAAO,SAAAC,GAAO,OAC/BA,EAAQ0B,KAAKH,cAAcI,SAASL,OAazBM,eATS,SAAAhC,GAAK,MAAK,CAChCiC,SAAUT,EAAoBxB,EAAMF,MAAOE,EAAMG,YAIxB,SAAA+B,GAAQ,MAAK,CACtCC,iBAAkB,SAAA9B,GAAE,OAAI6B,EAASX,EAAclB,QAGlC2B,EAlCK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUE,EAAb,EAAaA,iBAAb,OAClB,oBAAIC,UAAWC,IAAEJ,SAAjB,SACGA,EAASK,KAAI,gBAAGjC,EAAH,EAAGA,GAAIyB,EAAP,EAAOA,KAAMS,EAAb,EAAaA,OAAb,OACZ,qBAAIH,UAAWC,IAAEG,KAAjB,UACE,mBAAGJ,UAAWC,IAAEP,KAAhB,SAAuBA,IACvB,mBAAGM,UAAWC,IAAEI,IAAhB,SAAsBF,IACtB,wBAAQH,UAAWC,IAAEK,OAAQC,QAAS,kBAAMR,EAAiB9B,IAA7D,sBAH0BA,W,iBC+BnB2B,eAfS,SAAChC,GAAD,MAAY,CAClC4C,MAAO5C,EAAMG,WAGY,SAAA+B,GAAQ,MAAK,CACtCW,SAAU,SAACC,GAAD,OAAWZ,EAASZ,EAAcwB,EAAMC,cAAcH,YAUnDZ,EAjCA,SAAC,GAAD,IAAGY,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACb,qBAAKT,UAAWC,IAAElC,OAAlB,SACE,wBAAOiC,UAAWC,IAAEW,MAApB,UACE,mBAAGZ,UAAWC,IAAEnB,KAAhB,mCACA,uBACE+B,KAAK,OACLnB,KAAK,OACLoB,QAAQ,+MACRC,MAAM,kcACNC,UAAQ,EACRR,MAAOA,EACPC,SAAUA,EACVT,UAAWC,IAAEgB,gB,gBC+DrB,IAMerB,cAAQ,MANI,SAAAE,GAAQ,MAAK,CACtCoB,SAAU,SAAAV,GAAK,OAAIV,EAASlB,EAAW4B,QAK1BZ,EAjFf,YAAoC,IAAbsB,EAAY,EAAZA,SACrB,EAAwBC,mBAAS,IAAjC,mBAAOzB,EAAP,KAAa0B,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOhB,EAAP,KAAekB,EAAf,KAGMC,EAAe,SAAAZ,GACnB,MAAwBA,EAAMC,cAAtBjB,EAAR,EAAQA,KAAMc,EAAd,EAAcA,MAEd,OAAQd,GACN,IAAK,OACH0B,EAAQZ,GACR,MAEF,IAAK,SACHa,EAAUb,GACV,MAEF,QACE,SAsBN,OACE,uBAAMR,UAAWC,IAAEsB,KAAML,SAVN,SAAAR,GACnBA,EAAMc,iBAENN,EAAS,CAAExB,OAAMS,WACjBiB,EAAQ,IACRC,EAAU,KAKV,UACE,wBAAOrB,UAAWC,IAAEW,MAApB,iBAEE,uBACEC,KAAK,OACLnB,KAAK,OACLoB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRR,MAAOd,EACPe,SAAUa,EACVtB,UAAWC,IAAEgB,WAGjB,wBAAOjB,UAAWC,IAAEW,MAApB,mBAEE,uBACEC,KAAK,MACLnB,KAAK,SACLoB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRR,MAAOL,EACPM,SAAUa,EACVtB,UAAWC,IAAEgB,WAGjB,wBAAQJ,KAAK,SAASb,UAAWC,IAAEwB,OAAnC,+B,qCCmBSC,MAjFf,WACE,MAAgCP,mBAAS,IAAzC,mBAAOtB,EAAP,KAAiB8B,EAAjB,KAoEA,OAjEAC,qBAAU,WACR,IAAMC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,aACvDzC,QAAQC,IAAIoC,GACRA,GACFF,EAAYE,KAEb,IAGHD,qBAAU,WACRI,aAAaE,QAAQ,WAAYJ,KAAKK,UAAUtC,MAC/C,CAACA,IAuDF,sBAAKG,UAAWC,IAAEmC,IAAlB,UACE,oBAAIpC,UAAWC,IAAEc,MAAjB,uBACA,cAAC,EAAD,CAAasB,OAtDqB,SAAAvD,GAChBe,EAASyC,MAC3B,SAAAtE,GAAO,OAAIA,EAAQ0B,KAAKH,gBAAkBT,EAAKY,KAAKH,kBAGpDgD,MAAM,GAAD,OAAIzD,EAAKY,KAAT,+BAmDL,oBAAIM,UAAWC,IAAEuC,cAAjB,sBACA,cAAC,EAAD,IACA,cAAC,EAAD,QCjFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUpE,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJqE,SAASC,eAAe,U,kBCb1BxF,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,OAAS,8B,kBCAlID,EAAOC,QAAU,CAAC,SAAW,8BAA8B,KAAO,0BAA0B,KAAO,0BAA0B,IAAM,yBAAyB,OAAS,+B","file":"static/js/main.49348f3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__nsRTK\",\"label\":\"Filter_label__1xdgL\",\"text\":\"Filter_text__1qtjn\",\"input\":\"Filter_input__1hiJQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__B88Bl\",\"title\":\"App_title__3H7LS\",\"titleContacts\":\"App_titleContacts__3thIz\"};","export const ADD_CONTACT = 'ADD_CONTACT';\r\nexport const FILTER_CONTACT = 'GET_CONTACT';\r\nexport const DELETE_CONTACT = 'DELETE_CONTACT';","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { ADD_CONTACT, DELETE_CONTACT, FILTER_CONTACT } from './actions-types';\r\n//import { actions } from './actions';\r\n\r\n\r\n//---------------------------------через toolkit---------------------------------\r\nconst items = createReducer([], {\r\n  [ADD_CONTACT]: (state, action) => [...state, action.payload],\r\n  [DELETE_CONTACT]: (state, action) => state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [FILTER_CONTACT]: (_, action) => action.payload,\r\n});\r\n\r\n\r\nexport default combineReducers({ items, filter });\r\n\r\n\r\n\r\n//-----------------------------------через 'redux';----------------------------------------------------\r\n\r\n// const items = (state = [], action) => {\r\n//   switch (action.type) {\r\n//     case ADD_CONTACT:\r\n//       return [...state, action.payload];\r\n\r\n//     case DELETE_CONTACT:\r\n//       return state.filter((contact) => contact.id !== action.payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', action) => {\r\n//   switch (action.type) {\r\n//     case FILTER_CONTACT:\r\n//       return  action.payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n //export default combineReducers({ items, filter });\r\n\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger'\r\n\r\nimport  reducer  from './reducer';\r\n\r\n//---------------------------------через toolkit---------------------------------\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nexport const store = configureStore({\r\n  reducer,\r\n  middleware,\r\n  devtools: process.env.NODE_ENV !== 'development'\r\n  \r\n});\r\n\r\n\r\n//-----------------------------------через import { createStore } from 'redux';----------------------------------------------------\r\n\r\n// export const store = createStore(\r\n//   reducer,\r\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n// );","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport { ADD_CONTACT, DELETE_CONTACT, FILTER_CONTACT } from './actions-types';\r\n\r\n//---------------------------------через toolkit---------------------------------\r\nexport const addContact = createAction(ADD_CONTACT, text => {\r\n  return {\r\n    payload: {\r\n      id: shortid.generate(),\r\n      ...text,\r\n      completed: false,\r\n    }\r\n  }\r\n});\r\n\r\nexport const filterContact = createAction(FILTER_CONTACT);\r\n\r\nexport const deleteContact = createAction(DELETE_CONTACT);\r\n\r\n//-----------------------------------через 'redux';----------------------------------------------------\r\n// export function addContact(text) {\r\n//   return { type: ADD_CONTACT, payload: { id: shortid.generate(), ...text } };\r\n// }\r\n\r\n// export function filterContact(name) {\r\n//   return { type: FILTER_CONTACT, payload:  name  };\r\n// }\r\n\r\n// export function deleteContact(id) {\r\n//   return { type: DELETE_CONTACT, payload: id };\r\n// }\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/actions';\r\n\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContacts }) => (\r\n  <ul className={s.contacts}>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li className={s.item} key={id}>\r\n        <p className={s.name}>{name}</p>\r\n        <p className={s.tel}>{number}</p>\r\n        <button className={s.btnDel} onClick={() => onDeleteContacts(id)}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\n//-----------------поиск по фильтру\r\nconst getVisisbleContacts = (allContacts, filter) => {\r\n  const normoliseFilter = filter.toLowerCase();\r\n\r\n  console.log(allContacts);\r\n\r\n  return allContacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normoliseFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getVisisbleContacts(state.items, state.filter),\r\n});\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContacts: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-----------------другой вариант записи mapStateToProps\r\n// const mapStateToProps = state => {\r\n//   const { filter, items } = state;\r\n//   const visibilContacts = getVisisbleContacts(items, filter);\r\n\r\n//   return { contacts: visibilContacts };\r\n// };","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { filterContact } from '../../redux/actions';\r\n import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div className={s.filter}>\r\n    <label className={s.label}>\r\n      <p className={s.text}>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={value}\r\n        onChange={onChange}\r\n        className={s.input}\r\n      />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.filter,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: (event) => dispatch(filterContact(event.currentTarget.value)),\r\n})\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter) ;\r\n\r\n","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n//import {  useDispatch, useSelector } from 'react-redux';\r\nimport { addContact } from '../../redux/actions';\r\n\r\nimport s from './ContactForm.module.css';\r\n\r\nfunction ContactForm({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  //ввод в интпут\r\n  const handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  //-----------другой вариант записи handleChange------------\r\n  // const handleNameChange = event => {\r\n  //   setName(event.currentTarget.value);\r\n  // };\r\n  // const handleNumberChange = event => {\r\n  //   setNumber(event.currentTarget.value);\r\n  // };\r\n\r\n  //добавить контакт через кнопку\r\n  const handleSabmit = event => {\r\n    event.preventDefault();\r\n\r\n    onSubmit({ name, number });\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSabmit}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleChange}\r\n          className={s.input}\r\n        />\r\n      </label>\r\n      <label className={s.label}>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleChange}\r\n          className={s.input}\r\n        />\r\n      </label>\r\n      <button type=\"sabmit\" className={s.btnAdd}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: value => dispatch(addContact(value)),\r\n});\r\n\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\n//export default ContactForm;","import { useState, useEffect } from 'react';\r\n//Components\r\nimport ContactList from './Components/ContactList/ContactList';\r\nimport Filter from './Components/Filter/Filter';\r\nimport ContactForm from './Components/ContactForm/ContactForm';\r\n//pnotify\r\nimport '@pnotify/core/dist/BrightTheme.css';\r\nimport '@pnotify/core/dist/PNotify.css';\r\nimport '@pnotify/core/dist/BrightTheme.css';\r\nimport '@pnotify/confirm/dist/PNotifyConfirm.css';\r\n\r\nimport s from './App.module.css';\r\n\r\nfunction App() {\r\n  const [contacts, setContacts] = useState([]);\r\n\r\n  //-------------------запросы к удаленным ресурсам\r\n  useEffect(() => {\r\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\r\n    console.log(parsedContacts);\r\n    if (parsedContacts) {\r\n      setContacts(parsedContacts);\r\n    }\r\n  }, []);\r\n\r\n  //---------------------запись в localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  //  ----------------------------повтор контакта\r\n  const forSubmitHandlerRepeatContact = text => {\r\n    const someContact = contacts.some(\r\n      contact => contact.name.toLowerCase() === text.name.toLowerCase(),\r\n    );\r\n    if (someContact) {\r\n      alert(`${text.name} is already in contacts`);\r\n      return;\r\n    }\r\n  };\r\n\r\n  // //! ----------------------------добавить контакт\r\n  // const forSubmitHandler = text => {\r\n  //   //генерация id\r\n  //   const сontactsNew = {\r\n  //     id: shortid.generate(),\r\n  //     ...text,\r\n  //   };\r\n  //   const someContact = contacts.some(\r\n  //     contact => contact.name.toLowerCase() === text.name.toLowerCase(),\r\n  //   );\r\n  //   if (someContact) {\r\n  //     alert(`${text.name} is already in contacts`);\r\n  //     return;\r\n  //   }\r\n  // //------------------- добавляем новый контакт\r\n  // setContacts(prevState => [сontactsNew, ...prevState]);\r\n  //};\r\n\r\n  // //!-----------------------удалить контакт\r\n  // const deleteContacts = contactsId => {\r\n  //   setContacts(contacts =>\r\n  //     contacts.filter(contact => contact.id !== contactsId),\r\n  //   );\r\n  // };\r\n\r\n  // //!------------------------фильтр\r\n  // const changeFilter = event => {\r\n  //   return setFilter(event.currentTarget.value);\r\n  // };\r\n\r\n  // //!-----------------поиск по фильтру\r\n  // const getVisisbleContacts = () => {\r\n  //   const normoliseFilter = filter.toLowerCase();\r\n\r\n  //   return contacts.filter(contact =>\r\n  //     contact.name.toLowerCase().includes(normoliseFilter),\r\n  //   );\r\n  // };\r\n\r\n  // const getFilterVisisbleContacts = getVisisbleContacts();\r\n\r\n  return (\r\n    <div className={s.app}>\r\n      <h1 className={s.title}>Phonebook</h1>\r\n      <ContactForm submit={forSubmitHandlerRepeatContact} />\r\n\r\n      <h2 className={s.titleContacts}>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__9tFx8\",\"label\":\"ContactForm_label__2X8mw\",\"input\":\"ContactForm_input__2T9rM\",\"btnAdd\":\"ContactForm_btnAdd__3lggd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__j0lBN\",\"item\":\"ContactList_item__1HHdO\",\"name\":\"ContactList_name__Xn2Kn\",\"tel\":\"ContactList_tel__2sz89\",\"btnDel\":\"ContactList_btnDel__JhYN-\"};"],"sourceRoot":""}